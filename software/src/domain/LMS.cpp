/*******************************************************************************
 * @file LMS.cpp
 * @date 2023-12-06
 * @author Markus Rytter (markus.r@live.dk)
 *
 * @copyright Copyright (c) 2023
 *
 ******************************************************************************/

/**
 * @addtogroup Domain
 * @{
 */

/*******************************************************************************
 *    Private Includes
 ******************************************************************************/

#include "LMS.h"

#include <cassert>

/*******************************************************************************
 *    Private Defines
 ******************************************************************************/

/*******************************************************************************
 *    Private Type defintions
 ******************************************************************************/

/*******************************************************************************
 *    Extern
 ******************************************************************************/

/*******************************************************************************
 *    Private Class/Functions
 ******************************************************************************/

LMS::LMS(uint16_t inputs, float learning_rate) : _weights(inputs), _learning_rate(learning_rate)
{
    for (uint16_t i = 0; i < inputs; i++)
    {
        _weights.at(i) = 0.f;
    }
}

/*******************************************************************************/

/*******************************************************************************
 *    Public Class/Functions
 ******************************************************************************/

float LMS::evaluate(std::vector<float> inputs)
{
    assert(_weights.size() == inputs.size());
    float ret = 0;
    for (uint16_t i = 0; i < inputs.size(); i++)
    {
        ret += inputs.at(i) * _weights.at(i);
    }
    return ret;
}

/*******************************************************************************/

void LMS::error(float error, std::vector<float> inputs)
{
    assert(_weights.size() == inputs.size());

    float normalizer = 0;
    for(uint16_t i = 0; i < inputs.size(); i++)
    {
        normalizer += inputs[i] * inputs[i];
    }

    for(uint16_t i = 0; i < _weights.size(); i++)
    {
        _weights.at(i) += error * _learning_rate * inputs[i] / (normalizer + 1.0E-8);
    }
}

/*******************************************************************************/

/** @} addtogroup end */